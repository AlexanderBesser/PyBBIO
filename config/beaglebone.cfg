# Config file for PyBBIO 
# Edit with care

MMAP_OFFSET = 0x44c00000 
MMAP_SIZE   = 0x48ffffff-MMAP_OFFSET

##############################
##--- Start PRCM config: ---##
## Power Management and Clock Module

#--- Module clock control: ---
CM_WKUP = 0x44e00400-MMAP_OFFSET

CM_WKUP_ADC_TSC_CLKCTRL = 0xbc+CM_WKUP

MODULEMODE_ENABLE = 0x02
IDLEST_MASK = 0x03<<16
# To enable module clock:
#  _setReg(CM_WKUP_module_CLKCTRL, MODULEMODE_ENABLE)
#  while (_getReg(CM_WKUP_module_CLKCTRL) & IDLEST_MASK): pass
# To disable module clock:
#  _andReg(CM_WKUP_module_CLKCTRL, ~MODULEMODE_ENABLE)
#-----------------------------

##--- End PRCM config ------##
##############################

##############################
##--- Start GPIO config: ---##
GPIO0 = 0x44e07000-MMAP_OFFSET
GPIO1 = 0x4804c000-MMAP_OFFSET
GPIO2 = 0x481ac000-MMAP_OFFSET
GPIO3 = 0x481ae000-MMAP_OFFSET

GPIO_OE           = 0x134
GPIO_DATAIN       = 0x138
GPIO_DATAOUT      = 0x13c
GPIO_CLEARDATAOUT = 0x190
GPIO_SETDATAOUT   = 0x194

INPUT  = 1
OUTPUT = 0
HIGH   = 1
LOW    = 0

## GPIO pins:

# GPIO pins must be in form: [GPIO_mux, bit_value], e.g.:
#                "GPIO1_4" = [   GPIO1,    1<<4]  

GPIO = {
      "USR0" : [GPIO1, 1<<22],
      "USR1" : [GPIO1, 1<<22],
      "USR2" : [GPIO1, 1<<23],
      "USR3" : [GPIO1, 1<<24],
   "GPIO0_7" : [GPIO0, 0x128],
  "GPIO0_26" : [GPIO0, 1<<26],
  "GPIO0_27" : [GPIO0, 1<<27],
   "GPIO1_0" : [GPIO1, 0x001],
   "GPIO1_1" : [GPIO1, 0x002],
   "GPIO1_2" : [GPIO1, 0x004],
   "GPIO1_3" : [GPIO1, 0x008],
   "GPIO1_4" : [GPIO1, 0x016],
   "GPIO1_5" : [GPIO1, 0x032],
   "GPIO1_6" : [GPIO1, 0x064],
   "GPIO1_7" : [GPIO1, 0x128],
  "GPIO1_12" : [GPIO1, 1<<12],
  "GPIO1_13" : [GPIO1, 1<<13],
  "GPIO1_14" : [GPIO1, 1<<14],
  "GPIO1_15" : [GPIO1, 1<<15],
  "GPIO1_16" : [GPIO1, 1<<16],
  "GPIO1_17" : [GPIO1, 1<<17],
  "GPIO1_28" : [GPIO1, 1<<28],
  "GPIO1_29" : [GPIO1, 1<<29],
  "GPIO1_30" : [GPIO1, 1<<30],
  "GPIO1_31" : [GPIO1, 1<<31],
   "GPIO2_1" : [GPIO2, 0x001],
   "GPIO2_6" : [GPIO2, 0x064],
   "GPIO2_7" : [GPIO2, 0x128],
   "GPIO2_8" : [GPIO2, 0x256],
   "GPIO2_9" : [GPIO2, 0x512],
  "GPIO2_10" : [GPIO2, 1<<10],
  "GPIO2_11" : [GPIO2, 1<<11],
  "GPIO2_12" : [GPIO2, 1<<12],
  "GPIO2_13" : [GPIO2, 1<<13],
  "GPIO2_22" : [GPIO2, 1<<22],
  "GPIO2_23" : [GPIO2, 1<<23],
  "GPIO2_24" : [GPIO2, 1<<24],
  "GPIO2_25" : [GPIO2, 1<<25],
  "GPIO3_19" : [GPIO3, 1<<19],
  "GPIO3_21" : [GPIO3, 1<<21]
}

# Having available pins in a dictionary makes it easy to
# check for invalid pins, but it's nice not to have to pass
# around strings, so here's some friendly constants:
USR0     = "USR0"
USR1     = "USR1"
USR2     = "USR2"
USR3     = "USR3"
GPIO0_7  = "GPIO0_7"
GPIO0_26 = "GPIO0_26"
GPIO0_27 = "GPIO0_27"
GPIO1_0  = "GPIO1_0"
GPIO1_1  =  "GPIO1_1"
GPIO1_2  = "GPIO1_2"
GPIO1_3  = "GPIO1_3"
GPIO1_4  = "GPIO1_4"
GPIO1_5  = "GPIO1_5"
GPIO1_6  = "GPIO1_6"
GPIO1_7  = "GPIO1_7"
GPIO1_12 = "GPIO1_12"
GPIO1_13 = "GPIO1_13"
GPIO1_14 = "GPIO1_14"
GPIO1_15 = "GPIO1_15"
GPIO1_16 = "GPIO1_16"
GPIO1_17 = "GPIO1_17"
GPIO1_28 = "GPIO1_28"
GPIO1_29 =  "GPIO1_29"
GPIO1_30 = "GPIO1_30"
GPIO1_31 =  "GPIO1_31"
GPIO2_1  = "GPIO2_1"
GPIO2_6  = "GPIO2_6"
GPIO2_7  = "GPIO2_7"
GPIO2_8  = "GPIO2_8"
GPIO2_9  = "GPIO2_9"
GPIO2_10 = "GPIO2_10"
GPIO2_11 =  "GPIO2_11"
GPIO2_12 = "GPIO2_12"
GPIO2_13 = "GPIO2_13"
GPIO2_22 = "GPIO2_22"
GPIO2_23 = "GPIO2_23" 
GPIO2_24 = "GPIO2_24"
GPIO2_25 = "GPIO2_25"
GPIO3_19 = "GPIO3_19"
GPIO3_21 = "GPIO3_21"


##--- End GPIO config ------##
##############################

##############################
##--- Start ADC config: ----##

ADC_TSC = 0x44e0d000-MMAP_OFFSET

## Registers:

#--- ADC_CTRL ---
ADC_CTRL = ADC_TSC+0x40

ADC_STEPCONFIG_WRITE_PROTECT = lambda state: (state^0x01)<<2
# Write protect default on, must first turn off to change stepconfig:
# _setReg(ADC_CTRL, ADC_STEPCONFIG_WRITE_PROTECT(0))
 
TSC_ADC_SS_ENABLE = 0x01 
# To enable:
# _setReg(ADC_CTRL, TSC_ADC_SS_ENABLE)
#  This will turn STEPCONFIG write protect back on 
# To keep write protect off:
# _orReg(ADC_CTRL, TSC_ADC_SS_ENABLE)
#----------------

ADC_CLKDIV = ADC_TSC+0x4c  # Write desired value-1

#--- ADC_STEPENABLE ---
ADC_STEPENABLE = ADC_TSC+0x54

ADC_ENABLE = lambda AINx: 0x01<<(ADC[AINx]+1)
#----------------------

ADC_IDLECONFIG = ADC_TSC+0x58

#--- ADC STEPCONFIG ---
ADCSTEPCONFIG1 = ADC_TSC+0x64
ADCSTEPDELAY1  = ADC_TSC+0x68
ADCSTEPCONFIG2 = ADC_TSC+0x6c
ADCSTEPDELAY2  = ADC_TSC+0x70
ADCSTEPCONFIG3 = ADC_TSC+0x74
ADCSTEPDELAY3  = ADC_TSC+0x78
ADCSTEPCONFIG4 = ADC_TSC+0x7c
ADCSTEPDELAY4  = ADC_TSC+0x80
ADCSTEPCONFIG5 = ADC_TSC+0x84
ADCSTEPDELAY5  = ADC_TSC+0x88
ADCSTEPCONFIG6 = ADC_TSC+0x8c
ADCSTEPDELAY6  = ADC_TSC+0x90
ADCSTEPCONFIG7 = ADC_TSC+0x94
ADCSTEPDELAY7  = ADC_TSC+0x98
ADCSTEPCONFIG8 = ADC_TSC+0x9c
ADCSTEPDELAY8  = ADC_TSC+0xa0
# Only need the first 8 steps - 1 for each AIN pin


ADC_RESET = 0x00 # Default value of STEPCONFIG

ADC_AVG2  = 0x01<<2
ADC_AVG4  = 0x02<<2
ADC_AVG8  = 0x03<<2
ADC_AVG16 = 0x04<<2

SEL_INP = lambda AINx: (ADC[AINx]+1)<<19
# Set input with _orReg(ADCSTEPCONFIGx, SEL_INP(AINx))
# ADC[AINx]+1 because positive AMUX input 0 is VREFN 
#  (see user manual section 12.3.7)

SAMPLE_DELAY = lambda cycles: (cycles&0xff)<<24
# SAMPLE_DELAY is the number of cycles to sample for
# Set delay with _orReg(ADCSTEPDELAYx, SAMPLE_DELAY(cycles))

#----------------------

#--- ADC FIFO ---
ADC_FIFO0DATA = ADC_TSC+0x100

ADC_FIFO_MASK = 0xfff
# ADC result = _getReg(ADC_FIFO0DATA)&ADC_FIFO_MASK
#----------------

## ADC pins:

ADC = {
  'AIN0' : 0x00,
  'AIN1' : 0x01,
  'AIN2' : 0x02,
  'AIN3' : 0x03,
  'AIN4' : 0x04,
  'AIN5' : 0x05,
  'AIN6' : 0x06,
  'AIN7' : 0x07,
  'VSYS' : 0x07
}
# And some constants so the user doesn't need to use strings:
A0 = 'AIN0'
A1 = 'AIN1'
A2 = 'AIN2'
A3 = 'AIN3'
A4 = 'AIN4'
A5 = 'AIN5'
A6 = 'AIN6'
A7 = VSYS = 'AIN7'

##--- End ADC config -------##
##############################

